{
  "name": "Object-in-javascript",
  "tagline": "this is my study in object of JavaScript",
  "body": "#对象\r\n1 JavaScript对象是动态的---可以新增属性也可以删除属性，除了字符串、数字、true、false、null、undefined之外，JavaScript中的值都是对象。\r\n用这些术语来对三类JavaScript队形和两类属性作区分：\r\n1 内置对象（数组、函数、日期、正则表达式）\r\n2 宿主对象（HTMLElement对象）\r\n3 自定义对象（有运行中JavaScript代码创建的对象）\r\n4 自有属性（直接在对象中定义的属性）\r\n5 继承属性（在对象的原型对象中定义的属性）\r\n2 对象直接量是一个表达式，这个表达式的每次运算都创建病初始化一个新的的对象。每次计算对象直接量的时候，也都会计算他的每个属性的值。\r\n3 所有通过队形直接量创建的对象都具有同一个原型对象，病可以通过JavaScript代码Object.prototype获得对原型对象的引用。通过关键字new和构造函数调用创建对象的原型就是构造函数的prototype属性的值。\r\n4 没有原型的对象为数不多，Object.prototype就是其中之一。\r\n5 Object.create()是一个静态函数，而不是提供给某个对象调用的方法。可以通过传入null来创建一个没有原型的新对象，此对象不会继承任何东西，甚至基础方法toString()；可以通过传入Object.prototype来创建一个普通的对象。\r\n6 方括号内的表达式必须返回字符串或者一个可以转换为字符串的值。\r\n7 关联数组。又称为散列、映射或字典。\r\n8 在JavaScript中只有在查询属性时才能体会到继承的存在，而设置则和继承无关，这是JavaScript的一个重要特性，该特性让程序员可以有选择地覆盖继承的属性。\r\n9 属性不存在，访问不会报错；对象不存在，查询此对象上的属性访问则会报错。\r\n###10 在下列情景下给对象O设置属性P时会失败：\r\n+ O中的P是只读的\r\n+ O中的属性P时继承属性，且是只读的\r\n+ O中不存在自有属性P\r\n\r\n###11 删除属性：\r\n+ Delete只是断开属性和宿主对象的联系，而不会去操作属性中的属性。\r\n+ Delete运算符只能删除自有属性不能删除继承属性；\r\n+ Delete不能删除那些可配置为false的属性\r\n+ Delete不能删除不可配置的全局变量（var x = 1; delete this.x;）但是可以（this.x = 1;delete x;可以删除）\r\n\r\n###12 检测属性：\r\n可以通过in运算符、hasOwnPreperty()和propertyIsEnumerable()方法来完成这个工作，甚至仅通过属性查询也可以做到这一点。\r\nIn可以检测出自有属性和继承属性\r\nhasOwnProperty()检测给定的名字是否是对象的自有属性\r\npropertyIsEnumerable()是hasOwnProperty()的增强版，检测到时自有属性且属性是可枚举性为true才会返回true。\r\n\r\n###13 枚举属性\r\n&nbsp;&nbsp;对象继承的内置方法不可枚举，但在代码中给对象添加的属性都是可枚举的\r\n###14 属性getter和setter\r\n&nbsp;&nbsp;由getter和setter定义的属性称做“存储器属性”，它不同于“数据属性”，存储器属性不具有可写性。\r\n###15 属性的特性：\r\n+ &nbsp;&nbsp;Object.getOwnPropertyDescriptor()只能得到自有属性的描述符。要获得继承属性的特性，需要遍历原型链用Object.getPrototypeOf();\r\n+　&nbsp;&nbsp;要设置属性的特性，或者让新建属性就要某种特性，则需要调用Object.definePeoperty(),传入要修改的对象、要创建或修改的属性的名称以及属性描述符对象。如果要同时修改或创建多个属性，则需要使用Object.defineProperties().\r\n+ &nbsp;&nbsp;使用extend()函数，这个函数把一个对象的属性复制到另一个对象中。只是简单复制属性名和值，并没有复制属性的特性，而且也没有复制存取器属性的getter和setter方法只是将它们简单地转换为静态的数据属性。\r\n\r\n###16 原型属性\r\n要检测一个对象是否是另一个对象的原型，用isPrototypeOf()方法。\r\n###17 序列化对象\r\n是指将对象的状态转换为字符串，也可将字符串还原为对象\r\nJSON.stringify(o); //将对象序列化\r\nJSON.parse(s); //深拷贝\r\nJSON支持对象、数组、字符串、无穷大数字、true、false、null，并且它们可以序列化和还原。函数、RegExp、Error对象和undefined值不能序列化和还原。\r\n###18 对象方法\r\ntoString();\r\ntoLocalString();\r\ntoJSON();\r\nvalueOf();\r\n\r\n#第6章面向对象的程序设计\r\n##6.1 理解对象\r\n###6.1.1 属性类型\r\n+ 数据属性\r\n    + Configurable:表示能否通过delete删除属性从而重新定义属性。\r\n    + Enumerable:笔试能否通过for-in循环返回属性。\r\n    + Writable: 表示能否修改属性的值。\r\n    + Value: 包含这个属性的数据值。\r\n    \r\n&nbsp;&nbsp;    要修改属性的默认的特性，必须使用Object.defineProperty（）方法。例如：<br>Object.defineProperty(person,\"name\",{ writable:false,value:\"Nicholas\"}\r\n&nbsp;&nbsp;可以多次调用Object.defineProperty()方法修改同一个属性，但在吧configurable特性设置为false之后就会有限制了。\r\n+ 访问器属性\r\n    + Configurable:表示能否通过delete输出属性从而重新定义属性\r\n    + Enumerable:表示能否通过for-in循环返回属性。\r\n    + Get：在读取属性时调用的函数。\r\n    + Set：在写入属性是调用的函数。\r\n    \r\n    访问器属性不能直接定义，必须使用Object.defineProperty()来定义。使用Object.getOwnPropertyDescriptor()方法可以取得给定属性的描述符。\r\n## 6.2 创建对象\r\n### 6.2.1 工厂模式\r\n这种模式抽象了创建具体对象的过程。工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。\r\n    \r\n        function createPerson(name,age,job){\r\n            var o = new Object();\r\n            o.name = name,\r\n            o.age = age;\r\n            o.job = job;\r\n            o.sayName = function(){\r\n                alert(this.name);\r\n            };\r\n            return o;\r\n        }\r\n        var person1 = createPerson(\"Nicholas\",29,\"Software Engineer\");\r\n        var person2 = createPerson(\"Grag\",27,\"Doctor\"）;\r\n### 6.2.2构造函数模式\r\n    function Person(name,age,job){\r\n        this.name = name;\r\n        this.age = age;\r\n        this.job = job;\r\n        this.sayName = function(){\r\n            alert(this.name);\r\n        };\r\n    }\r\n    var person1 = new Person(\"Nicholas\",29,\"Software Engineer\");\r\n    var person2 = new Person('Garg\",17,\"Doctor\");\r\n创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型；而这正是构造函数模式胜过工厂模式的地方。使用构造函数的主要问题就是每个方法都要在每个实例上重新创建一遍。\r\n### 6.2.3 原型模式\r\n我们常见的每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共性的属性和方法。\r\n\r\n    function Person(){\r\n    }\r\n    Person.prototype.name = \"Nichoals\";\r\n    Person.prototype.age = 29;\r\n    Person.prototype.job = \"Doctor\";\r\n    Person.sayName = function(){\r\n        alert(this.name);\r\n    };\r\n    var person1 = new Person();\r\n    person1.sayName();\r\n    var person2 = new Person();\r\n    person2.sayName();\r\n1 理解原型属性\r\n&nbsp;&nbsp;    在此，我们将sayName（）方法和所有属性直接添加到了Person的prototype属性中，构造函数变成了空函数。即使如此，也仍然可以通过调用构造函数来创建新对象，而且新对象还会具有相同的属性和方法，但与构造函数模式不同的是，新对象的这些属性和方法都是有所有实例共享的。\r\n&nbsp;&nbsp;每当代码读取某个对象的某个属性时， 都会执行一次搜索，目标是具有给定名字的属性。搜索首先冲对象实例本身开始。如果在实例中找到了具有给定名字的属性，则返回该属性的值。如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。这正是对象实例共享原型所保存的属性和方法的基本原理。实例中的同名属性会覆盖原型中的同名属性。\r\n&nbsp;&nbsp;使用hasOwnProperty()方法可以检测一个属性是存在于 **实例** 中，还是存在于原型中。\r\n2 原型与in操作符\r\n有两种方式使用in操作符：\r\n    + 单独使用：in操作符会在通过对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。\r\n    + 在使用for-in循环时，返回的是所有能够通过对象访问的、可枚举的（enumerated）属性，其中既包括存在于实例中的属性，也包括存在于原型中的属性。\r\n    **要取得对象上所有可枚举的实例属性，可以使用Object.keys()方法。这个方法接收一个对象作为参数，返回一个包含所有可枚举属性的字符串数组。**\r\n    *如果你想得到所有实例属性，无论它是否可枚举，到可以使用<br>Object.getOwnPropertyNames()方法。*\r\n        \r\n        var keys = Object.getOwnPropertyNames(Person.prototype);\r\n        alert(keys);//\"constructor,name,age,job,sayName\"\r\n3 更简单的原型方法\r\n\r\n    function Person(){\r\n    }\r\n    Person.prototype = {\r\n        name:\"Nicholas\",\r\n        age:28,\r\n        job:\"Software Engineer\",\r\n        sayName:function(){\r\n            alert(this.name);\r\n        }\r\n    };\r\n6 原型对象的问题\r\n&nbsp;&nbsp;首先它忽略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值。虽然这会在某种程度上带来一些不方便，但还不是原型的最大问题，原型模式的最大问题就是由其共享的本性所导致的。这种共享对于函数非常合适。对于那些包含基本值的属性倒也说得过去，然而对于包含引用类型值的属性来说，问题就比较突出了。\r\n    \r\n     function Person(){\r\n    }\r\n    Person.prototype = {\r\n        name:\"Nicholas\",\r\n        age:28,\r\n        job:\"Software Engineer\",\r\n        friends :[\"Shelby\",\"Court\"],\r\n        sayName:function(){\r\n            alert(this.name);\r\n        }\r\n    };\r\n    var person1 = new Person();\r\n    var person2 = new Person();\r\n    person1.friends.push(\"Van\");\r\n    alert(person1.friends);\r\n    alert(person2.friends);\r\n    alert(person1.friends === person2.friends);//true\r\n### 6.2.4 组合使用构造函数模式和原型模式\r\n&nbsp;&nbsp;使用构造函数模式定义实例属性，原型模式用于定义方法和共享的属性。结果就是，每个实例都会有自己的一份实例属性的副本，但同时又共享着对方法的引用，最大限度地节省了内存。此外，这种混成模式还支持向构造函数传递参数；\r\n    \r\n    function Person(name,age,job){\r\n        this.name = name;\r\n        this.age = age;\r\n        this.job = job;\r\n        this.friends = [\"Shelby\",\"Court\"];\r\n    }\r\n    Person.prototype = {\r\n        constructor : Person,\r\n        sayName : function(){\r\n            alert(this.name);\r\n        }\r\n    }\r\n    var person1 = new Person(\"Nicholas\",29,\"Software Engineer\");\r\n    var person2 = new Person(\"Greg\",27,\"Doctor\");\r\n    person1.friends.push(\"Van\");\r\n    alert(person1.friends); //\"Shelby,Count,Van\"\r\n    alert(person2.friends); //\"Shelby,Count\"\r\n    alert(person1.friends === person2.friends); //true\r\n    alert(person1.sayName === person2.sayName); //false\r\n### 6.2.5 动态原型模式\r\n把所有信息都封装在构造函数中，而通过在构造函数中初始化原型，又保持了同时使用构造函数和原型的优点。\r\n\r\n    function Person(name,age,job){\r\n        this.name = name;\r\n        this.age = age;\r\n        this.job = job;\r\n        //方法\r\n        if(typeof this.sayName != \"function\"){\r\n            Person.prototype.sayName = function(){\r\n                alert(this.name);\r\n            };\r\n        }\r\n    }\r\n    var friend = new Person(\"Nicholas\"29,\"Software Engineer\");\r\n    friend.sayName();\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}